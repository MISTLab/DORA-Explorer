include "buzz_includes/buzz_utils/vec2.bzz"
include "buzz_includes/buzz_utils/string.bzz"
include "config/DBM-SMS/parameters.bzz"
include "buzz_includes/DBM-SMS/global_variables.bzz"
include "buzz_includes/debug.bzz"


ARENA_SIZE_X = 50
ARENA_SIZE_Y = 50

var stigmergy_risk
var stigmergy_exploration


function init_stigmergies() {
  stigmergy_risk = stigmergy.create(1)
  stigmergy_risk.onconflict(function(k, l, r){
    merged = l
    merged_data = l.data * 0.5 + r.data * 0.5
    merged.data = merged_data
    return merged
    })

  stigmergy_exploration = stigmergy.create(2)
  stigmergy_exploration.onconflict(function(k, l, r){
    merged = l
    merged_data = l.data * 0.5 + r.data * 0.5
    merged.data = merged_data
    return merged
    })

  if (id == 0) {
    var i = 0
    var j = 0
    while (i < ARENA_SIZE_X) {
      j = 0
      while (j < ARENA_SIZE_Y) {
        key = string.concat(string.tostring(i), "_", string.tostring(j))

        stigmergy_risk.put(key, -1)
        stigmergy_exploration.put(key, 0)

        j = j + 1
      }
      i = i + 1
    }
  }
}

function update_risk() {
  stigmergy_risk.put(get_current_key(), get_radiation_intensity())  # Put timestamp in exploration map
}

function update_exploration() {
  stigmergy_exploration.put(get_current_key(), current_step)  # Put timestamp in exploration map
}

function barrier_stigmergy_init() {
  return stigmergy_risk.size() >= ARENA_SIZE_X * ARENA_SIZE_Y and stigmergy_exploration.size() >= ARENA_SIZE_X * ARENA_SIZE_Y
}

function get_unit_vec(AXIS,i,j){
  key = string.concat(string.tostring(i), string.tostring(j))
  
  unit_vec_direction_x = { ."-1-1" = -0.707, ."-10" = -1.0, ."-11" = -0.707,
                    ."0-1" = 0.0, ."00" = 0.0, ."01" = 0.0, 
                    ."1-1" = 0.707, ."10" = 1.0, ."11" = 0.707}

  unit_vec_direction_y = { ."-1-1" = -0.707, ."-10" = 0.0, ."-11" = 0.707,
                    ."0-1" = -1.0, ."00" = 0.0, ."01" = 1.0, 
                    ."1-1" = -0.707, ."10" = 0.0, ."11" = 0.707}
  
if (AXIS == "X"){
  return unit_vec_direction_x["key"]
}

if (AXIS == "Y"){
  return unit_vec_direction_y["key"]
}

}

function goto_exploration(){
  i = -1
  j = -1
  vec_exploration.x = 0
  vec_exploration.y = 0
  while (i <= 1){
    j = -1
    while (j <= 1){
      gradient_intensity = (current_step - stigmergy_exploration.get(get_current_key()))
      vec_exploration.x = vec_exploration.x + gradient_intensity * get_unit_vec("X",i,j)
      vec_exploration.y = vec_exploration.y + gradient_intensity * get_unit_vec("Y",i,j)
      j = j + 1
    }
    i = i + 1
  }
  vec_exploration.x = vec_exploration.x / math.sqrt(vec_exploration.x^(2) + vec_exploration.y^(2))
  vec_exploration.y = vec_exploration.y / math.sqrt(vec_exploration.x^(2) + vec_exploration.y^(2))

  return vec_exploration
}

# Executed at init time
function init() {
  # Take off command for the Spiri drone model
  takeoff()

  # Show trajectory for debugging
  show_colored_trajectory(NUMBER_OF_ROBOTS)

  # Set first search position
  next_position.x = uniform(SEARCH_SPACE.minx, SEARCH_SPACE.maxx)
  next_position.y = uniform(SEARCH_SPACE.miny, SEARCH_SPACE.maxy)

  init_stigmergies()
}

# Random walk search
function random_search()
{ 
  next_position.x = uniform(math.max(next_position.x-SEARCH_SPEED, SEARCH_SPACE.minx), math.min(next_position.x+SEARCH_SPEED, SEARCH_SPACE.maxx))
  next_position.y = uniform(math.max(next_position.y-SEARCH_SPEED, SEARCH_SPACE.miny), math.min(next_position.y+SEARCH_SPEED, SEARCH_SPACE.maxy))
  goto(next_position.x, next_position.y)
}

# Executed every time step
function step() {
  if (barrier_stigmergy_init() and current_step < EXPERIMENT_LENGHT) {
    if (current_step % NEW_POSE_DELAY) {
      update_exploration()
      update_risk()

      # Find next position
      random_search()
    }
    current_step = current_step + 1
  } 
  else if (current_step == EXPERIMENT_LENGHT and id == 0) {
    stigmergy_risk.foreach(function(key, data, robot){
      log_datum(key, data)
    })
  }
}
 
# Execute at exit
function destroy() {
}
