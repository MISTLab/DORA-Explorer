include "buzz_includes/buzz_utils/matrix.bzz"


INFINITE_DISTANCE = 999999.9
NB_SENSORS = 8

# Manually tweaked design parameters,
# as those from the LCA paper did not yield good results in this case.
K = { .0 = { .0 = 20, .1 = 0.0 },
      .1 = { .0 = 0.0, .1 = 40 }} 


previous_sensor_readings = {}

function sign(n) {
    if (n > 0) {
        return 1
    } else if (n == 0) {
        return 0
    } else {
        return -1
    }
}

function convert_distance_reading(reading) {
    if (reading == 1) {
        return 0.05  # If sensor is saturated, assume robot is touching it
    }

    if (reading == 0) {
        return INFINITE_DISTANCE  # If no object is detected
    }

    return math.min(-math.log((reading + 0.085) / 4.14) / 33.0, 0.05)
}

function closest_obstacle_id() {
    var i = 0
    var min_distance = INFINITE_DISTANCE
    var closest_id = -1

    while (i < NB_SENSORS) {
        var distance = convert_distance_reading(proximity[i].value)
        if (distance < min_distance) {
            min_distance = distance
            closest_id = i
        }
        i = i + 1
    }

    return closest_id
}

function calculate_distance_vector(obstacle_id) {
    var a = proximity[obstacle_id].angle
    var d = convert_distance_reading(proximity[obstacle_id].value)

    return math.vec2.scale(math.vec2.new(math.cos(a), math.sin(a)), d)
}

function calculate_risk_collision(obstacle_id) {
    var d = convert_distance_reading(proximity[obstacle_id].value)

    if (size(previous_sensor_readings) == 0) {
        var d_dot = 1.0
    } else {
        var d_dot = previous_sensor_readings[obstacle_id].value - proximity[obstacle_id].value
    }

    return math.exp(-d * sign(d_dot))
}

function calculate_avoidance_control() {
    var obstacle_id = closest_obstacle_id()

    var p = calculate_risk_collision(obstacle_id)
    var d = convert_distance_reading(proximity[obstacle_id].value)
    var delta = calculate_distance_vector(obstacle_id)

    var k_delta = math.matrix.multiply(K, math.matrix.newv(delta))

    return math.vec2.scale(math.vec2.new(k_delta[0][0], k_delta[1][0]), -p / d)
}

function close_to_obstacle(){
    var obstacle_id = closest_obstacle_id()

    if (obstacle_id == -1) {
        return 0
    } else{
        return 1
    }
}

function avoid_obstacle() {
    var u_avoidance = calculate_avoidance_control()
    
    return u_avoidance
}

function update_previous_sensor_readings() {
    previous_sensor_readings = proximity
}
