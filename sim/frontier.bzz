include "buzz_includes/buzz_utils/vec2.bzz"
include "buzz_includes/buzz_utils/string.bzz"
include "config/DBM-SMS/parameters.bzz"
include "buzz_includes/DBM-SMS/global_variables.bzz"
include "buzz_includes/debug.bzz"

EDGE_BUFFER = 0.0
var stigmergy_risk
var stigmergy_exploration
NO_FAIL_DELAY = 20
MAX_SCAN_DISTANCE = math.max(SEARCH_SPACE.maxx - SEARCH_SPACE.minx, SEARCH_SPACE.maxy - SEARCH_SPACE.miny)

function log_metrics(){
  if (debug.msgqueue != nil and failed != 1) {
    log_datasize(debug.msgqueue.total, current_step)
  }
  if (id == 0) {
    stigmergy_risk.foreach(function(key, data, robot){
      log_datum(key, data, current_step)
    })
  }
}

function init_stigmergies() {
  stigmergy_risk = stigmergy.create(1)
  stigmergy_risk.onconflict(function(k, l, r){
    return l
    })

  stigmergy_exploration = stigmergy.create(2)
  stigmergy_exploration.onconflict(function(k, l, r){
    return l
    })
}

function update_risk() {
  new_value = get_radiation_intensity() + math.rng.gaussian(0,0.1)
  current_key = get_current_key()
  if (stigmergy_risk.get(current_key) != nil){
    new_value = 0.5 * new_value + 0.5 * stigmergy_risk.get(current_key)
  }
  stigmergy_risk.put(current_key, new_value)
}

function update_exploration() {
  stigmergy_exploration.put(get_current_key(), current_step)  # Put timestamp in exploration map
}


function failure() {
  rand = math.rng.uniform(0.2, 1.0)
  intensity = get_radiation_intensity()

  if (current_step > NO_FAIL_DELAY and rand < intensity) {
    log("Robot ", id, ": Failure with ", intensity," > ", rand)   
    return 1
  }
  return 0
}

function get_key(position) {
  return string.concat(string.tostring(position.x), "_", string.tostring(position.y))
}

function get_adjacent_position(i, j) {
  split_key = string.split(get_current_key(), "_")
  x = string.toint(split_key[0]) + i
  y = string.toint(split_key[1]) + j

  return math.vec2.new(x,y)
}

# Safely normalize a vector. 
# If input vector is (0, 0), return a random vector to avoid division by zero.
function safe_normalize(vector) {
  if (vector.x == 0 and vector.y == 0) {
    return math.vec2.new(math.rng.uniform(-0.5, 0.5), math.rng.uniform(-0.5, 0.5))
  } else {
    return math.vec2.norm(vector)
  }
}

function position_in_bounds(position){
  return position.x <= SEARCH_SPACE.maxx - EDGE_BUFFER and
         position.x >= SEARCH_SPACE.minx + EDGE_BUFFER and 
         position.y <= SEARCH_SPACE.maxy - EDGE_BUFFER and
         position.y >= SEARCH_SPACE.miny + EDGE_BUFFER
}

function explored_cell(key){
  return stigmergy_exploration.get(key) != nil
}

function find_closest_frontier(){
  var frontier_found = 0
  var scan_distance = 1
  min_angular_diff = 2.0*math.pi

  while ((not frontier_found) and (scan_distance < MAX_SCAN_DISTANCE)){
    var i = -scan_distance
    var j = -scan_distance

    while (i <= scan_distance){
      j = -scan_distance

      while (j <= scan_distance){
        var adjacent_position = get_adjacent_position(i,j)

        if (position_in_bounds(adjacent_position) and (not explored_cell(get_key(adjacent_position)))){
          angular_diff =  math.abs(pose.orientation.yaw - math.vec2.angle(math.vec2.new(i,j)))

          if (angular_diff < min_angular_diff){
            frontier_vec = math.vec2.new(i,j)
            frontier_found = 1
            min_angular_diff = angular_diff
          }
        }
        j = j + 1
      }
      i = i + 1
    }
    scan_distance = scan_distance + 1
    

  }
  if (frontier_found){
    return safe_normalize(frontier_vec)
  }

  return nil
}

function move() {
  frontier_direction = find_closest_frontier()

  if (frontier_direction != nil) {
    frontier_direction_local = math.vec2.rotate(frontier_direction, -pose.orientation.yaw)
    scaled_direction = math.vec2.scale(frontier_direction_local, SEARCH_SPEED)

    gotoc(scaled_direction.x, scaled_direction.y)


  }
}

# Executed at init time
function init() {
  # Show trajectory for debugging
  show_colored_trajectory(NUMBER_OF_ROBOTS)

  set_leds(0,255,0)
  init_stigmergies()
  failed = 0
  math.rng.setseed(id)

}

# Executed every time step
function step() {
  if (current_step < EXPERIMENT_LENGHT) {
    if (current_step % NEW_POSE_DELAY and failed == 0) {
      update_exploration()
      update_risk()
      move()
      failed = failure()
    }
    log_metrics()
  }

  if (current_step > EXPERIMENT_LENGHT or failed != 0){
    set_wheels(0.0,0.0)
    set_leds(255,0,0)
  }

  current_step = current_step + 1
}
 
# Execute at exit
function destroy() {
}
