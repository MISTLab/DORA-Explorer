include "buzz_includes/buzz_utils/vec2.bzz"
include "buzz_includes/buzz_utils/string.bzz"
include "config/DBM-SMS/parameters.bzz"
include "buzz_includes/DBM-SMS/global_variables.bzz"
include "buzz_includes/debug.bzz"
include "buzz_includes/buzz_utils/obstacle_avoidance.bzz"


EXPLORATION_GAIN = 1.0
RISK_GAIN = 1.5
NO_FAIL_DELAY = 20

var stigmergy_risk
var stigmergy_exploration


function log_metrics(){
  if (debug.msgqueue != nil and failed != 1) {
    log_datasize(debug.msgqueue.total, current_step)
  }
  if (id == 0) {
    stigmergy_risk.foreach(function(key, data, robot){
      log_datum(key, data, current_step)
    })
  }
}

function key_to_vec2(key) {
  split_key = string.split(get_current_key(), "_")
  x = string.toint(split_key[0])
  y = string.toint(split_key[1])

  return math.vec2.new(x, y)
}

function init_stigmergies() {
  stigmergy_risk = stigmergy.create(1)
  stigmergy_risk.onconflict(function(k, l, r){
    return l
    })

  stigmergy_exploration = stigmergy.create(2)
  stigmergy_exploration.onconflict(function(k, l, r){
    return l
    })
}

function update_risk() {
  new_value = get_radiation_intensity() + math.rng.gaussian(0,0.1)
  current_key = get_current_key()
  if (stigmergy_risk.get(current_key) != nil){
    new_value = 0.5 * new_value + 0.5 * stigmergy_risk.get(current_key)
  }
  stigmergy_risk.put(current_key, new_value)
}

function update_exploration() {
  stigmergy_exploration.put(get_current_key(), current_step)  # Put timestamp in exploration map
}

function position_in_bounds(position){
  return position.x <= SEARCH_SPACE.maxx and
         position.x >= SEARCH_SPACE.minx and 
         position.y <= SEARCH_SPACE.maxy and
         position.y >= SEARCH_SPACE.miny 
}

function exploration_gradient(adjacent_key, i, j) {
  if (position_in_bounds(get_adjacent_position(i,j))){
    exploration_adjacent = stigmergy_exploration.get(adjacent_key)
    if (exploration_adjacent!= nil) {
      return current_step - exploration_adjacent
    } else {
        return current_step
    }
  } else {
      return 0.0
  }
}

function risk_gradient(adjacent_key) {
  risk_adjacent = stigmergy_risk.get(adjacent_key)
  if (risk_adjacent != nil) {
    return get_radiation_intensity() - risk_adjacent 
  } else {
    return 0.0
  }
}

function get_adjacent_key(i, j) {
  split_key = string.split(get_current_key(), "_")
  key_x = string.toint(split_key[0]) + i
  key_y = string.toint(split_key[1]) + j

  return string.concat(string.tostring(key_x), "_", string.tostring(key_y))
}

function get_adjacent_position(i, j) {
  split_key = string.split(get_current_key(), "_")
  x = string.toint(split_key[0]) + i
  y = string.toint(split_key[1]) + j

  return math.vec2.new(x,y)
}

# Safely normalize a vector. 
function safe_normalize(vector) {
  if (vector.x == 0 and vector.y == 0) {
    return vector
  } else {
    return math.vec2.norm(vector)
  }
}

function gradient(gradient_function){
  var i = -1
  var j = -1
  var gradient_vec = math.vec2.new(0.0, 0.0)

  while (i <= 1){
    j = -1
    while (j <= 1){
      if (not(i == 0 and j == 0)){
        gradient_intensity = gradient_function(get_adjacent_key(i, j),i,j)
        adjacent_gradient = math.vec2.scale(math.vec2.norm(math.vec2.new(i, j)), gradient_intensity)
        gradient_vec = math.vec2.add(gradient_vec, adjacent_gradient)
      }
      j = j + 1
    }
    i = i + 1
  }

  #if gradient too small ignore it
  if (math.abs(math.vec2.length(gradient_vec)) < 0.1) {
    return math.vec2.new(0.0, 0.0)
  } else {
    return safe_normalize(gradient_vec)
  }
}

function move() {
  exploration = math.vec2.scale(gradient(exploration_gradient), EXPLORATION_GAIN)
  risk = math.vec2.scale(gradient(risk_gradient), RISK_GAIN)

  if (close_to_obstacle()){
    obstacle_avoidance = avoid_obstacle()
  } else{
      obstacle_avoidance = math.vec2.new(0.0,0.0)
  }

    if (risk.x != 0.0 or risk.y != 0.0){
      risk_direction_local = math.vec2.rotate(risk, -pose.orientation.yaw)
    } else{
      risk_direction_local = math.vec2.new(1.0,0.0)
    }

    if (exploration.x != 0.0 or exploration.y != 0.0){
      exploration_direction_local = math.vec2.rotate(exploration, -pose.orientation.yaw)
    } else{
      exploration_direction_local = math.vec2.new(1.0,0.0)
    }

    norm_direction = math.vec2.add(exploration_direction_local, risk_direction_local)
    norm_direction_avoidance = safe_normalize(math.vec2.add(norm_direction, obstacle_avoidance))
    scaled_direction = math.vec2.scale(norm_direction_avoidance, SEARCH_SPEED)

    gotoc(scaled_direction.x, scaled_direction.y)
}

function failure() {
  rand = math.rng.uniform(0.2, 1.0)
  intensity = get_radiation_intensity()
  if (current_step > NO_FAIL_DELAY and rand < intensity) {
    log("Robot ", id, ": Failure with ", intensity," > ", rand)
    return 1
  }
  return 0
}

# Executed at init time
function init() {
  # Show trajectory for debugging
  show_colored_trajectory(NUMBER_OF_ROBOTS)

  set_leds(0,255,0)
  init_stigmergies()
  failed = 0
  math.rng.setseed(id)
}

# Executed every time step
function step() {
  if (current_step < EXPERIMENT_LENGHT) {
    if (current_step % NEW_POSE_DELAY and failed == 0) {
      update_exploration()
      update_risk()
      move()
      update_previous_sensor_readings()
      failed = failure()
    }
    log_metrics()
  }

  if (current_step > EXPERIMENT_LENGHT or failed != 0){
    set_wheels(0.0,0.0)
    set_leds(255,0,0)
  }

  current_step = current_step + 1
}

function reset() {
}
 
# Execute at exit
function destroy() {
}
